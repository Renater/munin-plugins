#!/usr/bin/perl
# -*- perl -*-

=head1 NAME

vasco_auth - Plugin to monitor Vasco OTP radius auths

=head1 CONFIGURATION

Example configuration:

[vasco_auth]
    env.logdir /opt/vasco/identikey/var/log/identikey/
    env.logfile auth.log

=head1 AUTHOR

Copyright (C) 2013 Sean Porth <sporth@oit.umass.edu>

=head1 LICENSE

GNU GPLv2

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
   
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
          
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
          
=cut

#v 1.0

use strict;
use Munin::Plugin;

my $LOGDIR  = $ENV{'logdir'}  || '/opt/vasco/identikey/var/log/identikey/';
my $LOGFILE = $ENV{'logfile'} || 'auth.log';

my $pos    = undef;

my $accepts = 0;
my $rejects = 0;

sub parseLogfile {
    my ($fname, $start) = @_;

    my ($LOGFILE,$rotated) = tail_open($fname,$start);

    my $line;

    while (<$LOGFILE>) {

        my $line = $_;
	$accepts++ if (/ikeyserver\[\d+\]\:\s\{Success\}/);
	$rejects++ if (/ikeyserver\[\d+\]\:\s\{Failure\}/);

    }
    return tail_close($LOGFILE);
}

if ( $ARGV[0] and $ARGV[0] eq "autoconf" ) {
    print "no\n";
    exit 0;
}

if ( $ARGV[0] and $ARGV[0] eq "config" ) {
    print "graph_title Vasco requests\n";
    print "graph_args --base 1000\n";
    print "graph_vlabel requests / \${graph_period}\n";
    print "graph_scale yes\n";
    print "graph_category radius\n";
    
    print "accepts.label Access-Accepts\n";
    print "accepts.info total sent Access-Accept packets\n";
    print "accepts.type DERIVE\n";
    print "accepts.min 0\n";
                
    print "rejects.label Access-Rejects\n";
    print "rejects.info total sent Access-Reject packets\n";
    print "rejects.type DERIVE\n";
    print "rejects.min 0\n";
                                
    exit 0;
}

my $logfile = "$LOGDIR/$LOGFILE";

if (! -f $logfile) {
    print "accepts.value U\n";
    print "rejects.value U\n";
    exit 1;
}

($pos) = restore_state();

if (!defined($pos)) {
    
    # No state file present.  Avoid startup spike: Do not read log
    # file up to now, but remember how large it is now, and next
    # time read from there.

    $pos = (stat $logfile)[7]; # File size
} else {
    $pos = parseLogfile ($logfile, $pos);
}

print "accepts.value $accepts\n";
print "rejects.value $rejects\n";

save_state($pos);

